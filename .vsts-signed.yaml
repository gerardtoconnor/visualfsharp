variables:
- name: MSBuildConfiguration
  value: 'Release'
- name: PB_PublishBlobFeedUrl
  value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
- group: DotNet-Blob-Feed
- name: PB_PublishBlobFeedKey
  value: $(dotnetfeed-storage-access-key-1)

jobs:
- job: Full_Signed
  pool:
    name: VSEng-MicroBuildVS2017
  timeoutInMinutes: 300
  variables:
    MSBuildConfiguration: 'Release'
  steps:
  # Install Signing Plugin
  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: Install Signing Plugin
    inputs:
      signType: real
    condition: and(succeeded(), in(variables['PB_SignType'], 'test', 'real'))

  # Install Swix Plugin
  - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1
    displayName: Install Swix Plugin

  # Run build.cmd
  - task: CmdLine@1
    displayName: Run build.cmd
    inputs:
      filename: build.cmd
      arguments: microbuild

  # Publish nightly package to MyGet
  - task: PowerShell@1
    displayName: Publish nightly package to MyGet
    inputs:
      scriptName: 'setup\publish-assets.ps1'
      arguments: '-binariesPath artifacts\bin -configuration $(MSBuildConfiguration) -branchName $(Build.SourceBranch) -apiKey $(FSharp.MyGetApiKey)'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'myget'))

  # Package publish
  - task: CmdLine@1
    displayName: Restore package publishing
    inputs:
      filename: '.nuget\NuGet.exe'
      arguments: 'restore packages.config -PackagesDirectory packages -Source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: MSBuild@1
    displayName: Publish packages to Azure Blob Storage
    inputs:
      solution: PublishToBlob.proj
      msbuildArguments: '/t:Build /p:Configuration=$(MSBuildConfiguration) /p:ExpectedFeedUrl=$(PB_PublishBlobFeedUrl) /p:AccountKey=$(PB_PublishBlobFeedKey) /p:ManifestRepouri=$(Build.Repository.Uri) /p:ManifestBranch=$(Build.SourceBranch) /p:ManifestCommit=$(Build.SourceVersion) /p:ManifestBuildId=$(Build.BuildNumber) /bl:$(Build.SourcesDirectory)/artifacts/log/$(MSBuildConfiguration)/pub/publish.binlog'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: PublishBuildArtifacts@1
    displayName: Publish publishing bin log
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(MSBuildConfiguration)/pub'
      ArtifactName: 'Publish_bin_log'
      publishLocation: Container
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: CopyFiles@2
    displayName: Gather Asset Manifests
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/assets/orchestration-metadata/manifests'
      TargetFolder: '$(Build.StagingDirectory)/AssetManifests'
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: PublishBuildArtifacts@1
    displayName: Push Asset Manifests
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)/AssetManifests'
      PublishLocation: Container
      ArtifactName: AssetManifests
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))

  # Create static drop
  - task: PublishBuildArtifacts@1
    displayName: Create static drop
    inputs:
      PathtoPublish: 'artifacts'
      ArtifactName: '$(Build.BuildNumber)'
      publishLocation: FilePath
      TargetPath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)'
      Parallel: true
      ParallelCount: 64
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'drop'))

  # Publish symbols
  - task: PublishSymbols@1
    displayName: Publish symbols
    inputs:
      SymbolsPath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(Build.BuildNumber)\Symbols'
      SearchPattern: '**\*.dll;**\*.exe;**\*.pdb'
      SymbolsFolder: '$(Build.SourcesDirectory)\artifacts\SymStore'
      TreatNotIndexedAsWarning: true
      SymbolsProduct: '$(Build.DefinitionName)'
      SymbolsVersion: '$(Build.BuildNumber)'
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'symbols'))

  # Upload VSTS Drop
  - task: ms-vseng.MicroBuildTasks.4305a8de-ba66-4d8b-b2d1-0dc4ecbbf5e8.MicroBuildUploadVstsDropFolder@1
    displayName: Upload VSTS Drop
    inputs:
      DropFolder: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(MSBuildConfiguration)\Insertion'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'vsts'))

  # Execute cleanup tasks
  - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
    displayName: Execute cleanup tasks
    condition: succeededOrFailed()

  # Publish Artifact: MicroBuildOutputs
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: MicroBuildOutputs'
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)\MicroBuild\Output'
      ArtifactName: MicroBuildOutputs
      publishLocation: Container
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'microbuild'))

  # Publish Symbols to Symweb
  - task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
    displayName: Publish symbols to SymWeb
    inputs:
      symbolServiceURI: 'https://microsoft.artifacts.visualstudio.com/DefaultCollection'
      sourcePath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(Build.BuildNumber)\SymStore'
      usePat: false
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'symweb'))
